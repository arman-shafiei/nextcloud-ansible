--- # This is an Ansible script to deploy nextcloud on a desired number of machines before initializing web.

- hosts: prometheus
  user: root
  gather_facts: true
  vars_files: ./vars.yaml
  tasks:

    - name: Update the packages (APT based)
      apt:
        name: '*'
        state: latest
        update_cache: yes
        only_upgrade: yes
      when: ansible_os_family == "Debian"

    - name: Remove packages not needed anymore (Debian based)
      apt:
        autoremove: yes
      when: ansible_os_family == "Debian"

    - name: Update the packages (YUM based)
      yum:
        name: '*'
        state: latest
        update_cache: yes
        update_only: yes
      when: ansible_os_family == "RedHat"

    - name: Remove packates not needed anymore (YUM based)
      yum:
        autoremove: yes
      when: ansible_os_family == "RedHat"

    - name: Create base directory for nextcloud
      file:
        path: "{{ base_directory }}"
        state: directory
        mode: '0775'

    - name: Copy the docker compose file
      copy:
        src: ./docker-compose/docker-compose.yaml
        dest: "{{ base_directory }}/docker-compose.yaml"

    - name: Copy the docker compose network file
      copy:
        src: ./docker-compose/network.yaml
        dest: "{{ base_directory }}/network.yaml"

    - name: Generate secrets
      shell: for i in `seq 2`; do tr -dc "A-Z0-9^*{}()a-z" < /dev/urandom | head -c 16 >> /tmp/temp_pass; echo >> /tmp/temp_pass; done

    - name: Write temporary environments
      shell: echo "{{ item }}=" >> /tmp/temp_env
      with_items:
        - MYSQL_ROOT_PASSWORD
        - MYSQL_PASSWORD

    - name: Assign environments with secrets
      shell: paste -d "" /tmp/temp_env /tmp/temp_pass >> {{ base_directory }}/.env

    - name: Assign non-secret variables
      shell: echo "{{ item.name }}={{ item.value }}" >> {{ base_directory }}/.env
      with_items:
        - "{{ non_secret_vars }}"

    - name: Assign private subnet
      shell: echo "PRIVATE_SUBNET={{ private_ip_subnet }}" >> {{ base_directory }}/.env

    - name: Assign private IPs
      shell: echo "{{ item.svc }}_IP={{ item.ip }}" >> {{ base_directory }}/.env
      with_items:
        - "{{ private_ip_addr }}"

    - name: Remove temporary files
      file:
        path: "/tmp/{{ item }}"
        state: absent
      with_items:
        - temp_env
        - temp_pass

    - name: Copy the config files
      copy:
        src: ./nginx
        dest: "{{ base_directory }}"

    - name: Create certs directory
      file:
        path: "{{ base_directory}}/nginx/certs"
        state: directory
        mode: '0755'

    - name: Get SSL Certificate
      shell: certbot certonly -q --standalone -m {{ letsencrypt_email }} -d {{ virtual_host }} --agree-tos

    - name: Move certificates to nginx directory
      copy:
        src: "/etc/letsencrypt/archive/{{ virtual_host }}/{{ item.original }}"
        dest: "{{ base_directory }}/nginx/certs/{{ item.renamed }}"
        remote_src: yes
      with_items:
        - "{{ cert_files }}"

    - name: Generate dhparam
      community.crypto.openssl_dhparam:
        path: "{{ base_directory }}/nginx/certs/dhparam.pem"
        size: 2048

    - name: Build the docker files
      shell: cd "{{ base_directory }}" && docker compose build

    - name: Run docker compose
      shell: cd "{{ base_directory }}" && docker compose -f docker-compose.yaml -f network.yaml up -d
